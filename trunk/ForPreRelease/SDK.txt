В этом документе кратко описывается необходимый функционал модуля плагина для VPSERVER 2.7

I. Прототипы функций.

char *MGetInfo(void);
function MGetInfo:PChar;

bool MInitProc(DWORD *h);
function MInitProc(var h:LongWord):Boolean;

void MRelProc(DWORD h);
procedure MRelProc(h:LongWord);

bool MMethProc(DWORD h, char *Meth);
function MMethProc(h:LongWord;Meth:PChar):Boolean;

bool MHeadProc(DWORD h, char *HName, char *HVal);
function MHeadProc(h:LongWord;HName:PChar;HVal:PChar):Boolean;

void MLoadPostProc(DWORD h, void *Buf, DWORD Size);
procedure MLoadProc(h:LongWord;var Buf;Size:LongWord);

void MLoadGetProc(DWORD h, char *GETLine);
procedure MLoadGetProc(h:LongWord;GETLine:PChar);

void MLoadMeth(DWORD h, char *Meth);
procedure MLoadMeth(h:LongWord;Meth:PChar);

bool MQueryProc(DWORD h, bool PartOP, bool OptOP, bool KAlive, bool PostOP, char *ppath);
function MQueryProc(h:LongWord;PartOP, OptOP, KAlive, PostOP:Boolean;ppath:PChar):Boolean;

DWORD MUpdateParamsProc(DWORD h, bool *PartOP, bool *OptOP, bool *KAlive, bool *SCLen, char *resph);
function MUpdateParamsProc(h:LongWord;var PartOP, OptOP, KAlive, SCLen:Boolean;resph:PChar):LongWord;

char *MGetHLine(DWORD h, DWORD n, bool main);
function MGetHLine(h:LongWord;n:LongWord;main:Boolean):PChar;

bool MSetPosProc(DWORD h, long int *ofs);
function MSetPosProc(h:LongWord;var ofs:LongInt);

void MReadProc(DWORD h, void *Buf, DWORD BufSize, long int *RealRead);
procedure MReadProc(h:LongWord;var Buf;BufSize:LongWord;var RealRead:LongInt);

bool MConfProc(char *s);
function MConfProc(s:PChar):Boolean;

void MGetSMeth(DWORD h, DWORD n, char *Str);
procedure MGetSMeth(h:LongWord;n:LongWord;Str:PChar);

II. Принцип работы

 Модуль загружается на этапе чтения конфигурации (параметр Plugin)

 При удачной загрузке (все функции найдены) вызывается функция MGetInfo, по которой модуль должен вернуть строку, идентифицирующую его

 Рекомендуемый формат строки:
<имя модуля> <версия> <модификация> Build <номер сборки> Copyright (c) <год> <автор>. <доп. информ.>

 Модуль используется во время обработки запроса потоком

 Сначала вызывается функция MInitProc, по которой модуль должен вернуть значение типа bool, определяющее, готов ли модуль обрабатывать запрос. Если true, то модуль должен вернуть правильный идентификатор (дескриптор), который будет использоваться для работы

 Затем программа оповещает модуль о полученном методе (MLoadMeth). ВНИМАНИЕ! На этом шаге модуль НЕ ДОЛЖЕН обрабатывать метод

 Если метод не может быть обработан программе, запрашивается возможность его обработки модулем (MMethProc). ВНИМАНИЕ! Модулю не получется обрабатывать методы PUT, PATCH, DELETE, TRACE, CONNECT, LINK и UNLINK, т.к. они считаются недопустимыми (т.е. программа сама обрабатывет их)

 При удачном стечении обстоятельств, модулю будет передана GET-строка (MLoadGetProc). При этом разрешается её изменить. Если используется неизвестный метод, то рекомендуется установить ppath на 0x0D 0x00

 Затем программа оповещает модуль о каждом заголовке запроса (MHeadProc). При этом модуль должен вернуть true, если он обработал заголовок. В любом случае заголовок будет обработан самой программой. Модуль может подменить значение поля (но не имя!). При заголовке Content-Length модуль должен вернуть true, если этот заголовок допустим

 Если был указан заголовок Content-Length, то программа передаёт модулю POST-параметры (MLoadPostProc).

 Затем программа спрашивает, может ли (!) модуль обработать запрос. При этом ей передаётся путь вместе с индексным файлом (index.html). Запрещается изменять любые данные на этом шаге

 Если модуль в состоянии обработать запрос, то выполняется функция MUpdateParamsProc, в которой и происходит обработка. Функция должна вернуть количество дополнительных заголовков ответа

 Если используется PartOP, то происходит разбор промежутков. Если конец промежутка не указан, то выполнятся MSetPosProc с параметром -1 (функция должна изменить значение на нужное, либо вернуть false). Если в результате будут получены некорректные промежутки, либо MUpdateParamsProc изменит PartOP на false, то программа вернёт 416 Requested Range Not Satisfiable

 Затем запрашиваются дополнительные заголовки (MGetHLine), если они необходимы

 Потом производится отправка запроса. Если модуль обрабатывает запрос, то все данные должен предоставить модуль (кроме заголовков). Для этого программа изменяет позицию с помощью функции MSetPosProc (если изменить позицию невозможно, функция обязана вернуть false) и использует функцию MReadProc для чтения буфера

 По завершению всех работ с дескриптором вызывается функция MRelProc

III. Работа с памятью

 Т.к. работа с памятью - важный аспект работы сервера, то эта информация вынесена в отдельную главу

 Общий принцип такой: после завершения MRelProc программа должна занимать столько же памяти, сколько до вызова MInitProc. Размер буфера для char * - 256 символов. Если программа записывает данные в этот буфер, она не должна его переполнить. Если это строка, то 256 символ обязан быть нулём. Если функция возвращает тип char *, то память, выделенная под буфер должна быть освобождена до завершения MRelProc

IV. Примечание к изменениям стандарта с версии 2.7

 Главным отличием является метод MGetHLine. У него появился параметр 'main'.

 'main' принимает значение true, если заголовки запрашиваются к главному ответу. Если используется Content-Range, то к каждому (при условии, если он не один) промежутку будут запрашиваться заголовки с 'main', равным false. Таким образом, модуль может (но не обязан - сделано для расширения количества методов, которых поддерживает сервер) добавить заголовок Accept-Ranges в главном блоке, когда как в дополниельных это недопустимо

 У метода MUpdateProc появился параметр SCLen, который позволяет модулю контролировать отправку заголовка Content-Length

 С помощью MGetSMeth программа получает дополнительные методы, которые поддерживает плагин (n=1 -> для Allow, n=2 -> для Public)